TODO
====

# Refactoring

## Layout

* Rename ETStackLayout to ETColumnLayout

* Modularize ETFlowLayout, ETLineLayout and ETStackLayout in order to:
	- share a common underlying layout algorithm (only flow and line shares code presently)
	- implement a vertical flow algorithm
	- ony request a minimal protocol for layouted objects: -x, -y, -width, -height, -setX:, -setY:, -setWidth:, setHeight: instead of the more complex one needed by a concrete layout that deals with ETLayoutItem instances (and the whole layout item tree machinery that encompass extra stuff like the event handling... for which the layout takes over in some cases).

The inheritance rooted in ETLayout goes currently like that:
	- ETFlowLayout
		- ETLineLayout
	- ETStackLayout

After the refactoring it should be:
	- ETFlowLayout
	- ETLineLayout
	- ETStackLayout

and a separate ETLayoutAlgorithm class tree of layout strategies:
	- ETHorizontalFlowAlgorithm
	- ETVerticalFlowAlgorithm
For these two subclasses, you can specify how the overflow should be handled. In ETFlowLayout, the right Flow algorithm is selected depending on the value returned by -isVerticallyOriented. In a very-long term vision, these classes could be eventually be subclassed for implementing text layout algorithms (see Universal Polygons in STEPS first year report).

So ETLineLayout results of using ETHorizontalFlowAlgorithm limited to a single line and the overflow hidden. Similarly ETStackLayout results of using ETVerticalFlowAlgorithm limited to a single column and the overflow hidden.

* Implement shape-driven and pattern-driven layouts (a typical case is a grid layout)
ETShapeLayout
-initWithShape:

ETShape
ETPatternShape

# AppKit

## Modularize NSView to fully separate all the concerns (event handling, hierarchy/composite, drawing surface, responders)
